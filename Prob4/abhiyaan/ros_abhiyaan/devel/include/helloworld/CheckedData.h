// Generated by gencpp from file helloworld/CheckedData.msg
// DO NOT EDIT!


#ifndef HELLOWORLD_MESSAGE_CHECKEDDATA_H
#define HELLOWORLD_MESSAGE_CHECKEDDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace helloworld
{
template <class ContainerAllocator>
struct CheckedData_
{
  typedef CheckedData_<ContainerAllocator> Type;

  CheckedData_()
    : rx()
    , checksum(0)  {
    }
  CheckedData_(const ContainerAllocator& _alloc)
    : rx(_alloc)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _rx_type;
  _rx_type rx;

   typedef uint16_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::helloworld::CheckedData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::helloworld::CheckedData_<ContainerAllocator> const> ConstPtr;

}; // struct CheckedData_

typedef ::helloworld::CheckedData_<std::allocator<void> > CheckedData;

typedef boost::shared_ptr< ::helloworld::CheckedData > CheckedDataPtr;
typedef boost::shared_ptr< ::helloworld::CheckedData const> CheckedDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::helloworld::CheckedData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::helloworld::CheckedData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::helloworld::CheckedData_<ContainerAllocator1> & lhs, const ::helloworld::CheckedData_<ContainerAllocator2> & rhs)
{
  return lhs.rx == rhs.rx &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::helloworld::CheckedData_<ContainerAllocator1> & lhs, const ::helloworld::CheckedData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace helloworld

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::helloworld::CheckedData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::helloworld::CheckedData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::helloworld::CheckedData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::helloworld::CheckedData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::helloworld::CheckedData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::helloworld::CheckedData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::helloworld::CheckedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c353c169969e7cd2afff681cde037722";
  }

  static const char* value(const ::helloworld::CheckedData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc353c169969e7cd2ULL;
  static const uint64_t static_value2 = 0xafff681cde037722ULL;
};

template<class ContainerAllocator>
struct DataType< ::helloworld::CheckedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "helloworld/CheckedData";
  }

  static const char* value(const ::helloworld::CheckedData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::helloworld::CheckedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] rx\n"
"uint16 checksum\n"
;
  }

  static const char* value(const ::helloworld::CheckedData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::helloworld::CheckedData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rx);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckedData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::helloworld::CheckedData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::helloworld::CheckedData_<ContainerAllocator>& v)
  {
    s << indent << "rx[]" << std::endl;
    for (size_t i = 0; i < v.rx.size(); ++i)
    {
      s << indent << "  rx[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.rx[i]);
    }
    s << indent << "checksum: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLOWORLD_MESSAGE_CHECKEDDATA_H
